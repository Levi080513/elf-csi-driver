// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/tower.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// MockTowerService is a mock of TowerService interface.
type MockTowerService struct {
	ctrl     *gomock.Controller
	recorder *MockTowerServiceMockRecorder
}

// MockTowerServiceMockRecorder is the mock recorder for MockTowerService.
type MockTowerServiceMockRecorder struct {
	mock *MockTowerService
}

// NewMockTowerService creates a new mock instance.
func NewMockTowerService(ctrl *gomock.Controller) *MockTowerService {
	mock := &MockTowerService{ctrl: ctrl}
	mock.recorder = &MockTowerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTowerService) EXPECT() *MockTowerServiceMockRecorder {
	return m.recorder
}

// AddLabelsToVolume mocks base method.
func (m *MockTowerService) AddLabelsToVolume(volumeID string, labels []string) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLabelsToVolume", volumeID, labels)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLabelsToVolume indicates an expected call of AddLabelsToVolume.
func (mr *MockTowerServiceMockRecorder) AddLabelsToVolume(volumeID, labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLabelsToVolume", reflect.TypeOf((*MockTowerService)(nil).AddLabelsToVolume), volumeID, labels)
}

// AddVMDisks mocks base method.
func (m *MockTowerService) AddVMDisks(vmName string, volumeIDs []string) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVMDisks", vmName, volumeIDs)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddVMDisks indicates an expected call of AddVMDisks.
func (mr *MockTowerServiceMockRecorder) AddVMDisks(vmName, volumeIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVMDisks", reflect.TypeOf((*MockTowerService)(nil).AddVMDisks), vmName, volumeIDs)
}

// CreateLabel mocks base method.
func (m *MockTowerService) CreateLabel(key, value string) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLabel", key, value)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLabel indicates an expected call of CreateLabel.
func (mr *MockTowerServiceMockRecorder) CreateLabel(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLabel", reflect.TypeOf((*MockTowerService)(nil).CreateLabel), key, value)
}

// CreateVMVolume mocks base method.
func (m *MockTowerService) CreateVMVolume(clusterIdOrLocalId, name string, storagePolicy models.VMVolumeElfStoragePolicyType, size uint64, sharing bool) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVMVolume", clusterIdOrLocalId, name, storagePolicy, size, sharing)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVMVolume indicates an expected call of CreateVMVolume.
func (mr *MockTowerServiceMockRecorder) CreateVMVolume(clusterIdOrLocalId, name, storagePolicy, size, sharing interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVMVolume", reflect.TypeOf((*MockTowerService)(nil).CreateVMVolume), clusterIdOrLocalId, name, storagePolicy, size, sharing)
}

// DeleteVMVolume mocks base method.
func (m *MockTowerService) DeleteVMVolume(volumeID string) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVMVolume", volumeID)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVMVolume indicates an expected call of DeleteVMVolume.
func (mr *MockTowerServiceMockRecorder) DeleteVMVolume(volumeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVMVolume", reflect.TypeOf((*MockTowerService)(nil).DeleteVMVolume), volumeID)
}

// GetISCSILuns mocks base method.
func (m *MockTowerService) GetISCSILuns(lunIDs []string) ([]*models.IscsiLun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetISCSILuns", lunIDs)
	ret0, _ := ret[0].([]*models.IscsiLun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetISCSILuns indicates an expected call of GetISCSILuns.
func (mr *MockTowerServiceMockRecorder) GetISCSILuns(lunIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetISCSILuns", reflect.TypeOf((*MockTowerService)(nil).GetISCSILuns), lunIDs)
}

// GetLabel mocks base method.
func (m *MockTowerService) GetLabel(key, value string) (*models.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabel", key, value)
	ret0, _ := ret[0].(*models.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabel indicates an expected call of GetLabel.
func (mr *MockTowerServiceMockRecorder) GetLabel(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabel", reflect.TypeOf((*MockTowerService)(nil).GetLabel), key, value)
}

// GetTask mocks base method.
func (m *MockTowerService) GetTask(id string) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", id)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockTowerServiceMockRecorder) GetTask(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockTowerService)(nil).GetTask), id)
}

// GetVM mocks base method.
func (m *MockTowerService) GetVM(vmName string) (*models.VM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVM", vmName)
	ret0, _ := ret[0].(*models.VM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVM indicates an expected call of GetVM.
func (mr *MockTowerServiceMockRecorder) GetVM(vmName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVM", reflect.TypeOf((*MockTowerService)(nil).GetVM), vmName)
}

// GetVMDisks mocks base method.
func (m *MockTowerService) GetVMDisks(vmName string, volumeIDs []string) ([]*models.VMDisk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVMDisks", vmName, volumeIDs)
	ret0, _ := ret[0].([]*models.VMDisk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVMDisks indicates an expected call of GetVMDisks.
func (mr *MockTowerServiceMockRecorder) GetVMDisks(vmName, volumeIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVMDisks", reflect.TypeOf((*MockTowerService)(nil).GetVMDisks), vmName, volumeIDs)
}

// GetVMVolumeByID mocks base method.
func (m *MockTowerService) GetVMVolumeByID(volumeID string) (*models.VMVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVMVolumeByID", volumeID)
	ret0, _ := ret[0].(*models.VMVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVMVolumeByID indicates an expected call of GetVMVolumeByID.
func (mr *MockTowerServiceMockRecorder) GetVMVolumeByID(volumeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVMVolumeByID", reflect.TypeOf((*MockTowerService)(nil).GetVMVolumeByID), volumeID)
}

// GetVMVolumeByName mocks base method.
func (m *MockTowerService) GetVMVolumeByName(volumeName string) (*models.VMVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVMVolumeByName", volumeName)
	ret0, _ := ret[0].(*models.VMVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVMVolumeByName indicates an expected call of GetVMVolumeByName.
func (mr *MockTowerServiceMockRecorder) GetVMVolumeByName(volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVMVolumeByName", reflect.TypeOf((*MockTowerService)(nil).GetVMVolumeByName), volumeName)
}

// GetVMVolumesByID mocks base method.
func (m *MockTowerService) GetVMVolumesByID(volumeIDs []string) ([]*models.VMVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVMVolumesByID", volumeIDs)
	ret0, _ := ret[0].([]*models.VMVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVMVolumesByID indicates an expected call of GetVMVolumesByID.
func (mr *MockTowerServiceMockRecorder) GetVMVolumesByID(volumeIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVMVolumesByID", reflect.TypeOf((*MockTowerService)(nil).GetVMVolumesByID), volumeIDs)
}

// RemoveVMDisks mocks base method.
func (m *MockTowerService) RemoveVMDisks(vmName string, volumeIDs []string) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVMDisks", vmName, volumeIDs)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveVMDisks indicates an expected call of RemoveVMDisks.
func (mr *MockTowerServiceMockRecorder) RemoveVMDisks(vmName, volumeIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVMDisks", reflect.TypeOf((*MockTowerService)(nil).RemoveVMDisks), vmName, volumeIDs)
}
